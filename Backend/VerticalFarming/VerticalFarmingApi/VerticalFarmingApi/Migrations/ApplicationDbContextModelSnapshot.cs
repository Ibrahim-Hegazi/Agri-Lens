// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VerticalFarmingApi.Data;

#nullable disable

namespace VerticalFarmingApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.AIAnalysisResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnnotatedImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<float>("Confidence")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("HealthPercentage")
                        .HasColumnType("real");

                    b.Property<string>("ZipPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AIAnalysisResults");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlantingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SensorId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("SensorId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.CropHealthReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("CropHealthReports");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.DiseaseAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AlertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("DiseaseAlerts");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.Farm", b =>
                {
                    b.Property<int>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FarmId");

                    b.HasIndex("UserId");

                    b.ToTable("Farms");

                    b.HasData(
                        new
                        {
                            FarmId = 1,
                            Location = "Smart Zone",
                            Name = "AI Demo Farm",
                            UserId = "4e594207-03c3-4410-a350-1945a7514801"
                        });
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FarmId = 1,
                            Name = "Air Temp Sensor",
                            Type = "Air Temperature"
                        },
                        new
                        {
                            Id = 2,
                            FarmId = 1,
                            Name = "Air Moisture Sensor",
                            Type = "Air Moisture"
                        },
                        new
                        {
                            Id = 3,
                            FarmId = 1,
                            Name = "Soil Moisture Sensor",
                            Type = "Soil Moisture"
                        });
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorDatas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = 20.0
                        },
                        new
                        {
                            Id = 2,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                            Value = 21.0
                        },
                        new
                        {
                            Id = 3,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 2, 0, 0, 0, DateTimeKind.Utc),
                            Value = 22.0
                        },
                        new
                        {
                            Id = 4,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 3, 0, 0, 0, DateTimeKind.Utc),
                            Value = 23.0
                        },
                        new
                        {
                            Id = 5,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 4, 0, 0, 0, DateTimeKind.Utc),
                            Value = 24.0
                        },
                        new
                        {
                            Id = 6,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Value = 20.0
                        },
                        new
                        {
                            Id = 7,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 6, 0, 0, 0, DateTimeKind.Utc),
                            Value = 21.0
                        },
                        new
                        {
                            Id = 8,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 7, 0, 0, 0, DateTimeKind.Utc),
                            Value = 22.0
                        },
                        new
                        {
                            Id = 9,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            Value = 23.0
                        },
                        new
                        {
                            Id = 10,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            Value = 24.0
                        },
                        new
                        {
                            Id = 11,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Value = 20.0
                        },
                        new
                        {
                            Id = 12,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 11, 0, 0, 0, DateTimeKind.Utc),
                            Value = 21.0
                        },
                        new
                        {
                            Id = 13,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = 22.0
                        },
                        new
                        {
                            Id = 14,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 13, 0, 0, 0, DateTimeKind.Utc),
                            Value = 23.0
                        },
                        new
                        {
                            Id = 15,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Value = 24.0
                        },
                        new
                        {
                            Id = 16,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 15, 0, 0, 0, DateTimeKind.Utc),
                            Value = 20.0
                        },
                        new
                        {
                            Id = 17,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 16, 0, 0, 0, DateTimeKind.Utc),
                            Value = 21.0
                        },
                        new
                        {
                            Id = 18,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 17, 0, 0, 0, DateTimeKind.Utc),
                            Value = 22.0
                        },
                        new
                        {
                            Id = 19,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 18, 0, 0, 0, DateTimeKind.Utc),
                            Value = 23.0
                        },
                        new
                        {
                            Id = 20,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 19, 0, 0, 0, DateTimeKind.Utc),
                            Value = 24.0
                        },
                        new
                        {
                            Id = 21,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 20, 0, 0, 0, DateTimeKind.Utc),
                            Value = 20.0
                        },
                        new
                        {
                            Id = 22,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 21, 0, 0, 0, DateTimeKind.Utc),
                            Value = 21.0
                        },
                        new
                        {
                            Id = 23,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            Value = 22.0
                        },
                        new
                        {
                            Id = 24,
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 1, 1, 23, 0, 0, 0, DateTimeKind.Utc),
                            Value = 23.0
                        },
                        new
                        {
                            Id = 25,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = 50.0
                        },
                        new
                        {
                            Id = 26,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                            Value = 51.0
                        },
                        new
                        {
                            Id = 27,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 2, 0, 0, 0, DateTimeKind.Utc),
                            Value = 52.0
                        },
                        new
                        {
                            Id = 28,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 3, 0, 0, 0, DateTimeKind.Utc),
                            Value = 53.0
                        },
                        new
                        {
                            Id = 29,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 4, 0, 0, 0, DateTimeKind.Utc),
                            Value = 54.0
                        },
                        new
                        {
                            Id = 30,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Value = 55.0
                        },
                        new
                        {
                            Id = 31,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 6, 0, 0, 0, DateTimeKind.Utc),
                            Value = 56.0
                        },
                        new
                        {
                            Id = 32,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 7, 0, 0, 0, DateTimeKind.Utc),
                            Value = 57.0
                        },
                        new
                        {
                            Id = 33,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            Value = 58.0
                        },
                        new
                        {
                            Id = 34,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            Value = 59.0
                        },
                        new
                        {
                            Id = 35,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Value = 50.0
                        },
                        new
                        {
                            Id = 36,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 11, 0, 0, 0, DateTimeKind.Utc),
                            Value = 51.0
                        },
                        new
                        {
                            Id = 37,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = 52.0
                        },
                        new
                        {
                            Id = 38,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 13, 0, 0, 0, DateTimeKind.Utc),
                            Value = 53.0
                        },
                        new
                        {
                            Id = 39,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Value = 54.0
                        },
                        new
                        {
                            Id = 40,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 15, 0, 0, 0, DateTimeKind.Utc),
                            Value = 55.0
                        },
                        new
                        {
                            Id = 41,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 16, 0, 0, 0, DateTimeKind.Utc),
                            Value = 56.0
                        },
                        new
                        {
                            Id = 42,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 17, 0, 0, 0, DateTimeKind.Utc),
                            Value = 57.0
                        },
                        new
                        {
                            Id = 43,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 18, 0, 0, 0, DateTimeKind.Utc),
                            Value = 58.0
                        },
                        new
                        {
                            Id = 44,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 19, 0, 0, 0, DateTimeKind.Utc),
                            Value = 59.0
                        },
                        new
                        {
                            Id = 45,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 20, 0, 0, 0, DateTimeKind.Utc),
                            Value = 50.0
                        },
                        new
                        {
                            Id = 46,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 21, 0, 0, 0, DateTimeKind.Utc),
                            Value = 51.0
                        },
                        new
                        {
                            Id = 47,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            Value = 52.0
                        },
                        new
                        {
                            Id = 48,
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 1, 1, 23, 0, 0, 0, DateTimeKind.Utc),
                            Value = 53.0
                        },
                        new
                        {
                            Id = 49,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = 40.0
                        },
                        new
                        {
                            Id = 50,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                            Value = 41.0
                        },
                        new
                        {
                            Id = 51,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 2, 0, 0, 0, DateTimeKind.Utc),
                            Value = 42.0
                        },
                        new
                        {
                            Id = 52,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 3, 0, 0, 0, DateTimeKind.Utc),
                            Value = 43.0
                        },
                        new
                        {
                            Id = 53,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 4, 0, 0, 0, DateTimeKind.Utc),
                            Value = 44.0
                        },
                        new
                        {
                            Id = 54,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Value = 45.0
                        },
                        new
                        {
                            Id = 55,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 6, 0, 0, 0, DateTimeKind.Utc),
                            Value = 46.0
                        },
                        new
                        {
                            Id = 56,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 7, 0, 0, 0, DateTimeKind.Utc),
                            Value = 40.0
                        },
                        new
                        {
                            Id = 57,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            Value = 41.0
                        },
                        new
                        {
                            Id = 58,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            Value = 42.0
                        },
                        new
                        {
                            Id = 59,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Value = 43.0
                        },
                        new
                        {
                            Id = 60,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 11, 0, 0, 0, DateTimeKind.Utc),
                            Value = 44.0
                        },
                        new
                        {
                            Id = 61,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = 45.0
                        },
                        new
                        {
                            Id = 62,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 13, 0, 0, 0, DateTimeKind.Utc),
                            Value = 46.0
                        },
                        new
                        {
                            Id = 63,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Value = 40.0
                        },
                        new
                        {
                            Id = 64,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 15, 0, 0, 0, DateTimeKind.Utc),
                            Value = 41.0
                        },
                        new
                        {
                            Id = 65,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 16, 0, 0, 0, DateTimeKind.Utc),
                            Value = 42.0
                        },
                        new
                        {
                            Id = 66,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 17, 0, 0, 0, DateTimeKind.Utc),
                            Value = 43.0
                        },
                        new
                        {
                            Id = 67,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 18, 0, 0, 0, DateTimeKind.Utc),
                            Value = 44.0
                        },
                        new
                        {
                            Id = 68,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 19, 0, 0, 0, DateTimeKind.Utc),
                            Value = 45.0
                        },
                        new
                        {
                            Id = 69,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 20, 0, 0, 0, DateTimeKind.Utc),
                            Value = 46.0
                        },
                        new
                        {
                            Id = 70,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 21, 0, 0, 0, DateTimeKind.Utc),
                            Value = 40.0
                        },
                        new
                        {
                            Id = 71,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            Value = 41.0
                        },
                        new
                        {
                            Id = 72,
                            SensorId = 3,
                            Timestamp = new DateTime(2024, 1, 1, 23, 0, 0, 0, DateTimeKind.Utc),
                            Value = 42.0
                        });
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VerticalFarmingApi.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.Crop", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.Farm", "Farm")
                        .WithMany("Crops")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VerticalFarmingApi.Data.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId");

                    b.Navigation("Farm");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.CropHealthReport", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.DiseaseAlert", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.Farm", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.User", "User")
                        .WithMany("Farms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.Sensor", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.Farm", "Farm")
                        .WithMany("Sensors")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.SensorData", b =>
                {
                    b.HasOne("VerticalFarmingApi.Data.Models.Sensor", "Sensor")
                        .WithMany("SensorData")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.Farm", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.Sensor", b =>
                {
                    b.Navigation("SensorData");
                });

            modelBuilder.Entity("VerticalFarmingApi.Data.Models.User", b =>
                {
                    b.Navigation("Farms");
                });
#pragma warning restore 612, 618
        }
    }
}
